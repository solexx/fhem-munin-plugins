#!/bin/bash
# -*- bash -*-

#set -x

: << =cut

=head1 NAME

fhem_humidity_all - Plugin to automatically monitor desired temperatures from FHEM

=head1 CONFIGURATION

If your FHEM server's telnet service does not listen on localhost:7072, set it
like so in plugin.conf:

 [fhem_auto_*]
 env.fhem_host fhem.example.org
 env.fhem_port 8888

For plotting the EnOcean specific valve positions you should make sure, that you
don't have the older readings "desired-temp" in your devices. These readings 
were used until approximately 2016 and may still reside in the list of your
readings, but are not being actualised for a very long time. If so, you must
delete these readings via the FHEM command "deletereading <devspec>
<readingname>".  See more in the FHEM commandref.

=head1 AUTHORS

=over

=item 2018.03.17 added desired-temp resp. setpointTemp from EnOcean deviced by Karsten Be√üner <jihmcdra43nl@opayq.com>
=item 2016.01.10 Initial version by Jochen Spieker <jrspieker@well-adjusted.de>

=back

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

fhem_host=${fhem_host:-localhost}
fhem_port=${fhem_port:-7072}

call_fhem() {
	echo "$@" | nc -q1 "$fhem_host" "$fhem_port" | while read line; do
		test -n "$line" && echo "$line"
	done
}

all_target_temp_devices() {
	call_fhem "list setpointTemp=[0-9.]+:FILTER=TYPE=EnOcean NAME" | awk '{ print $1 }'
	call_fhem "list desiredTemperature=[0-9.]+:FILTER=device!=.+ NAME" | awk '{ print $1 }'
	call_fhem "list desired-temp=[0-9.]+:FILTER=device!=.+ NAME" | awk '{ print $1 }' | \
		# skip peered devices in order to suppress dupes
		while read device; do
			# for Homematic thermostats, we need to get the device from channel_02
			model=$(call_fhem "{ AttrVal(\"${device}\", \"model\", \"foo\") }")
			if [ "${model}" == "HM-CC-RT-DN" ]; then
				device=$(call_fhem "{ InternalVal(\"${device}\", \"channel_02\", \"foo\") }")
			fi
			state=$(call_fhem "{ ReadingsVal(\"${device}\", \"state\", \"\") }")
			if [ "$state" != "peered" ]; then
				echo "$device"
			fi
		done
}

get_target_temp_from_device() {
	call_fhem "{ ReadingsVal(\"${1}\", \"desiredTemperature\", ReadingsVal(\"${1}\", \"setpointTemp\", ReadingsVal(\"${1}\", \"desired-temp\", 0))) }"
}

case $1 in
	config)
        cat <<'EOF'
graph_title FHEM Desired Temperatures (auto)
graph_vlabel degrees Celsius
graph_scale no
graph_category fhem_auto
graph_info This graph shows temperature readings from FHEM
graph_data_size custom 7d, 30m for 30d, 2h for 365d, 1d for 3650d
graph_printf %6.1lf
EOF
		all_target_temp_devices | while read device; do
			devname="$(echo "$device" | tr '[.]' '_')"
			echo "${devname}.label ${device}"
		done

        exit 0
		;;
	autoconf)
		if echo "quit" | nc -q1 "$fhem_host" "$fhem_port" > /dev/null 2>&1 ; then
			echo "yes"
		else
			echo "no (Connection to ${fhem_host}:${fhem_port} failed.)"
		fi
		exit 0
		;;
esac 

all_target_temp_devices | while read device; do
	devname="$(echo "$device" | tr '[.]' '_')"
	echo "${devname}.value $(get_target_temp_from_device ${device})"
done

exit 0

